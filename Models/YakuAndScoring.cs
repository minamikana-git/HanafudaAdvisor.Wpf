using System.Collections.Generic; using System.Linq; namespace HanafudaAdvisor.Wpf.Models { public static class YakuCatalog{ public const int Gokou=10; public const int Yonkou=8; public const int AmeYonkou=7; public const int Sankou=5; public const int Inoshikacho=5; public const int Akatan=5; public const int Aotan=5; public const int Hanami=5; public const int Tsukimi=5; public const int KasuBase=1; public const int TanzakuBase=1; public const int TaneBase=1; } public static class Scoring{ public static int ScorePile(System.Collections.Generic.IReadOnlyCollection<Card> pile){ int points=0; int kasu=pile.Count(c=>c.Type==CardType.Kasu); int tanzaku=pile.Count(c=>c.Type==CardType.Tanzaku); int tane=pile.Count(c=>c.Type==CardType.Tane); int hikari=pile.Count(c=>c.Type==CardType.Hikari); bool hasRain=pile.Any(c=>c.Type==CardType.Hikari && c.IsRain); if(kasu>=10) points+=YakuCatalog.KasuBase+(kasu-10); if(tanzaku>=5) points+=YakuCatalog.TanzakuBase+(tanzaku-5); if(tane>=5) points+=YakuCatalog.TaneBase+(tane-5); if(pile.Count(c=>c.IsRedPoem)==3) points+=YakuCatalog.Akatan; if(pile.Count(c=>c.IsBlueRibbon)==3) points+=YakuCatalog.Aotan; if(pile.Any(c=>c.IsBoar) && pile.Any(c=>c.IsDeer) && pile.Any(c=>c.IsButterfly)) points+=YakuCatalog.Inoshikacho; if(pile.Any(c=>c.IsCup) && pile.Any(c=>c.Type==CardType.Hikari && c.Month==3)) points+=YakuCatalog.Hanami; if(pile.Any(c=>c.IsCup) && pile.Any(c=>c.Type==CardType.Hikari && c.Month==8)) points+=YakuCatalog.Tsukimi; if(hikari>=5) points+=YakuCatalog.Gokou; else if(hikari==4) points+= (hasRain? YakuCatalog.AmeYonkou : YakuCatalog.Yonkou); else if(hikari==3 && !hasRain) points+=YakuCatalog.Sankou; return points; } public static System.Collections.Generic.IEnumerable<(string name,int points)> ListCompletedYaku(System.Collections.Generic.IReadOnlyCollection<Card> pile){ int kasu=pile.Count(c=>c.Type==CardType.Kasu); int tanzaku=pile.Count(c=>c.Type==CardType.Tanzaku); int tane=pile.Count(c=>c.Type==CardType.Tane); int hikari=pile.Count(c=>c.Type==CardType.Hikari); bool hasRain=pile.Any(c=>c.Type==CardType.Hikari && c.IsRain); if(kasu>=10) yield return ("繧ｫ繧ｹ", YakuCatalog.KasuBase + (kasu - 10)); if(tanzaku>=5) yield return ("遏ｭ蜀・, YakuCatalog.TanzakuBase + (tanzaku - 5)); if(tane>=5) yield return ("繧ｿ繝・, YakuCatalog.TaneBase + (tane - 5)); if(pile.Count(c=>c.IsRedPoem)==3) yield return ("襍､遏ｭ", YakuCatalog.Akatan); if(pile.Count(c=>c.IsBlueRibbon)==3) yield return ("髱堤洒", YakuCatalog.Aotan); if(pile.Any(c=>c.IsBoar) && pile.Any(c=>c.IsDeer) && pile.Any(c=>c.IsButterfly)) yield return ("迪ｪ鮖ｿ陜ｶ", YakuCatalog.Inoshikacho); if(pile.Any(c=>c.IsCup) && pile.Any(c=>c.Type==CardType.Hikari && c.Month==3)) yield return ("闃ｱ隕九〒荳譚ｯ", YakuCatalog.Hanami); if(pile.Any(c=>c.IsCup) && pile.Any(c=>c.Type==CardType.Hikari && c.Month==8)) yield return ("譛郁ｦ九〒荳譚ｯ", YakuCatalog.Tsukimi); if(hikari>=5) yield return ("莠泌・", YakuCatalog.Gokou); else if(hikari==4) yield return (!hasRain ? ("蝗帛・", YakuCatalog.Yonkou) : ("髮ｨ蝗帛・", YakuCatalog.AmeYonkou)); else if(hikari==3 && !hasRain) yield return ("荳牙・", YakuCatalog.Sankou); } public static double ProgressSignal(System.Collections.Generic.IReadOnlyCollection<Card> pile){ double s=0; int hikari=pile.Count(c=>c.Type==CardType.Hikari); bool hasRain=pile.Any(c=>c.Type==CardType.Hikari && c.IsRain); if(hikari<3 || (hikari==3 && hasRain)) s+=1.0*hikari*0.3; int tanzaku=pile.Count(c=>c.Type==CardType.Tanzaku); if(tanzaku<5) s+=0.4*tanzaku*0.1; int tane=pile.Count(c=>c.Type==CardType.Tane); if(tane<5) s+=0.4*tane*0.1; int reds=pile.Count(c=>c.IsRedPoem); if(reds<3) s+=0.8*reds*0.2; int blues=pile.Count(c=>c.IsBlueRibbon); if(blues<3) s+=0.8*blues*0.2; int trio=(pile.Any(c=>c.IsBoar)?1:0)+(pile.Any(c=>c.IsDeer)?1:0)+(pile.Any(c=>c.IsButterfly)?1:0); if(trio<3) s+=1.1*trio*0.3; return s; } }